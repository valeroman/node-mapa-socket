{"version":3,"sources":["hooks/useMapbox.js","context/SocketContext.js","hooks/useSocket.js","pages/MapaPage.js","hooks/useSocketMapbox.js","MapasApp.js","index.js"],"names":["dotenv","config","mapboxgl","accessToken","SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","connect","transports","useState","online","setOnline","useEffect","connected","on","useSocket","Provider","value","puntoInicial","lng","lat","zoom","MapaPage","mapaDiv","useRef","setRef","useCallback","node","current","marcadores","movimientoMarcador","Subject","nuevoMarcador","mapa","coords","setCoords","agregarMarcador","ev","id","lngLat","marker","Marker","v4","setLngLat","addTo","setDraggable","next","target","getLngLat","actualizarPosicion","map","Map","container","style","center","getCenter","toFixed","getZoom","movimientoMarcador$","nuevoMarcador$","useMapbox","useContext","Object","keys","key","subscribe","marcador","emit","useSocketMapbox","className","ref","MapasApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f6aec0b.chunk.js","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { v4 } from 'uuid';\nimport { Subject } from 'rxjs'\nimport dotenv from 'dotenv';\ndotenv.config();\n\n// mapboxgl.accessToken = process.env.REACT_APP_MAPBOXGL_TOKEN;\nmapboxgl.accessToken = 'pk.eyJ1IjoidmFsZXJvbWFuIiwiYSI6ImNraHoxNGx2dzBjZzgyd29oanl6aW9rN3kifQ.kBtunHmUn4AoM5-5g01zhQ';\n\nexport const useMapbox = (puntoInicial) => {\n\n    // mapDiv va a mantener la referencia,\n    // sin importar que el componente se vuelva a redibujar\n    const mapaDiv = useRef();\n    const setRef = useCallback((node) => {\n        mapaDiv.current = node;\n    }, []);\n\n    // Referencia a los marcadores\n    const marcadores = useRef({});\n\n    // Observables de Rxjs\n    const movimientoMarcador = useRef(new Subject());\n    const nuevoMarcador = useRef(new Subject());\n\n    // Mapa y Coords\n    const mapa = useRef();\n    const [coords, setCoords] = useState(puntoInicial);\n\n    // Funcion para agregar marcadores\n    const agregarMarcador = useCallback((ev, id) => {\n\n        const { lng, lat } = ev.lngLat || ev;\n\n            const marker = new mapboxgl.Marker();\n            marker.id = id ?? v4();\n\n            marker\n                .setLngLat([ lng, lat ])\n                .addTo(mapa.current)\n                .setDraggable(true);\n\n            // Asignamos al objeto de marcadores\n            marcadores.current[marker.id] = marker;\n\n            // Si el  marcador no tiene ID no emitir\n            if (!id) {\n                nuevoMarcador.current.next({\n                    id: marker.id,\n                    lng,\n                    lat\n                });\n            }\n\n            // Escuchar movimientos del marcador\n            marker.on('drag', ({ target }) => {\n                const { id } = target;\n                const { lng, lat } = target.getLngLat();\n                \n                // Emitir los cambios del marcador\n                movimientoMarcador.current.next({\n                    id,\n                    lng,\n                    lat\n                });\n            });\n\n            \n    }, []);\n\n    // Funcion para actualizar la ubicacion del marcador\n    const actualizarPosicion = useCallback(({ id, lng, lat}) => {\n        marcadores.current[id].setLngLat([lng, lat]);\n    }, []);\n\n\n    useEffect( () => {\n\n        const map = new mapboxgl.Map({\n            container: mapaDiv.current,\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [puntoInicial.lng, puntoInicial.lat],\n            zoom: puntoInicial.zoom\n        });\n\n        mapa.current = map;\n\n    }, [puntoInicial]);\n\n    // Cuando se mueve el mapa\n    useEffect( () => {\n\n        mapa.current?.on('move', () => {\n            const { lng, lat } = mapa.current.getCenter();\n            setCoords({\n                lng: lng.toFixed(4),\n                lat: lat.toFixed(4),\n                zoom: mapa.current.getZoom().toFixed(2)\n            });\n        });\n\n        // destruir el componente\n        // return mapa?.off('move');\n\n    }, []);\n\n    // Agregar marcadores cuando hago click\n    useEffect(() => {\n        mapa.current?.on('click', agregarMarcador);\n\n    }, [agregarMarcador]);\n\n    return {\n        actualizarPosicion,\n        agregarMarcador,\n        coords,\n        marcadores,\n        movimientoMarcador$: movimientoMarcador.current,\n        nuevoMarcador$: nuevoMarcador.current,\n        setRef,\n\n    }\n}\n","import React from 'react';\nimport { createContext } from 'react';\nimport { useSocket } from '../hooks/useSocket'\n\nexport const SocketContext = createContext();\n\n\nexport const SocketProvider = ({ children }) => {\n\n    // const { socket, online } = useSocket('http://localhost:7021');\n    const { socket, online } = useSocket('https://mapa-rv.herokuapp.com/');\n    \n    \n    return (\n        <SocketContext.Provider value={{ socket, online }}>\n            { children }\n        </SocketContext.Provider>\n    )\n}","import { useEffect, useMemo, useState } from 'react';\nimport io from 'socket.io-client';\n\n\nexport const useSocket = ( serverPath ) => {\n    \n    const socket = useMemo(() => io.connect( serverPath, {transports: ['websocket']} ), [ serverPath ] );\n    const [ online, setOnline ] = useState(false);\n\n    useEffect(() => {\n        setOnline( socket.connected );\n    }, [socket])\n\n    useEffect(() => {\n        socket.on('connect', () => setOnline( true ));\n    }, [ socket ])\n\n    useEffect(() => {\n        socket.on('disconnect', () => setOnline( false ));\n    }, [ socket ])\n\n    return {\n        socket,\n        online\n    }\n}\n","import React from 'react';\nimport { useMapbox } from '../hooks/useMapbox';\nimport { useSocketMapbox } from '../hooks/useSocketMapbox';\n\n\nconst puntoInicial = {\n    lng: -79.5370,\n    lat: 8.9318,\n    zoom: 13\n}\n\nexport const MapaPage = () => {\n\n    const { coords, setRef, nuevoMarcador$, movimientoMarcador$, agregarMarcador, actualizarPosicion } = useMapbox(puntoInicial);\n\n    useSocketMapbox(puntoInicial, nuevoMarcador$, movimientoMarcador$, agregarMarcador, actualizarPosicion);\n    \n    return (\n        <>\n            <div className=\"info\">\n                Lng: { coords.lng } | Lat: { coords.lat } | Zoom: { coords.zoom }\n            </div>\n\n            <div \n                ref={ setRef }\n                className=\"mapContainer\"\n            />\n        </>\n    )\n}\n","import { useContext, useEffect } from 'react';\nimport { SocketContext } from '../context/SocketContext';\n\nexport const useSocketMapbox = (puntoInicial, nuevoMarcador$, movimientoMarcador$, agregarMarcador, actualizarPosicion) => {\n\n    const { socket } = useContext(SocketContext);\n\n    // Escuchar los marcadores existentes\n    useEffect(() => {\n        socket.on('marcadores-activos', (marcadores) => {\n            for (const key of Object.keys(marcadores)) {\n                agregarMarcador(marcadores[key], key);\n            }\n            // console.log('marcadores-react=>', marcadores);\n        })\n    }, [socket, agregarMarcador]);\n\n    // Nuevo Marcador\n    useEffect(() => {\n        nuevoMarcador$.subscribe((marcador) => {\n            // Emitir nuevo marcador\n            socket.emit('marcador-nuevo', marcador);\n        });\n    }, [nuevoMarcador$, socket]);\n\n    // Movimiento de Marcador\n    useEffect(() => {\n        movimientoMarcador$.subscribe((marcador) => {\n            socket.emit('marcador-actualizado', marcador);\n        });\n\n    }, [socket, movimientoMarcador$]);\n\n    // Mover marcador mediante sockets\n    useEffect(() => {\n        socket.on('marcador-actualizado', (marcador) => {\n            actualizarPosicion(marcador);\n        });\n    }, [socket, actualizarPosicion]);\n\n    // Escuchar nuevos marcadores\n    useEffect(() => {\n        socket.on('marcador-nuevo', (marcador) => {\n            agregarMarcador(marcador, marcador.id);\n        });\n    }, [socket, agregarMarcador]);\n\n}","import React from 'react';\nimport { MapaPage } from './pages/MapaPage';\nimport { SocketProvider } from './context/SocketContext';\n\nexport const MapasApp = () => {\n\n    return (\n        <SocketProvider>\n            <MapaPage/>\n        </SocketProvider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MapasApp } from './MapasApp';\n\nReactDOM.render(\n  \n  <MapasApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}